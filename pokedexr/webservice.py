# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/WebService.ipynb (unless otherwise specified).

__all__ = ['ON_JUPY', 'static_dir', 'templates', 'static_files', 'data_files', 'learn', 'home', 'card', 'feedback',
           'analyze', 'routes', 'app']

# Cell
import sys, os
from pathlib import Path
import aiohttp
import pickle
import base64
from io import BytesIO

import uvicorn
from starlette.applications import Starlette
from starlette.responses import JSONResponse, RedirectResponse
from starlette.routing import Route, Mount
from starlette.templating import Jinja2Templates
from starlette.staticfiles import StaticFiles

from fastai.vision import *

# Cell
ON_JUPY = os.environ['_'].split('/')[-1].lower() == 'jupyter'
static_dir = Path('pokedexr/static') if ON_JUPY else Path('static')

# Cell
templates = Jinja2Templates(directory=static_dir / 'templates')
static_files = StaticFiles(directory=static_dir)
data_files = pathlib.Path(static_dir / 'data')

# Cell
print('Initialising Learner...')
learn = load_learner(data_files,'export.pkl')
with open(data_files / 'cards.pkl','rb') as f:
    cards = pickle.load(f)

# Cell


# Cell
async def home(request):
    return templates.TemplateResponse('index.html', {'request': request})

# Cell
async def card(request):
    if request.path_params['name'] == 'notknown':
        return templates.TemplateResponse('cardnotknown.html', {'request': request})

    info = cards.get(request.path_params['name'],None)
    return templates.TemplateResponse('card.html', {'request': request, 'card':info})


# Cell
async def feedback(request):
    ans,name = request.query_params['ans'],request.query_params['name']
    with open('feedback.csv','a') as f:
        if ans == 'correct':
            f.write(f"{name},1\n")
        elif ans == 'wrong':
            f.write(f"{name},0\n")
        else:
            pass
    return RedirectResponse(url=f"/", status_code=303)


# Cell
import pdb
async def analyze(request):
    img_data = await request.form()
    img = open_image(img_data['file'].file)
    print('Got image, making prediction...')


    predicted_class, pred_class_i, class_probs = learn.predict(img)

    info = cards.get(str(predicted_class),None)
    if info:
        return RedirectResponse(url=f"/card/{info['sname']}", status_code=303)
    else:
        return RedirectResponse(url="/card/notknown")


# Cell

routes = [
    Route('/', endpoint=home),
    Route('/card/{name}', card),
    Route('/analyze', analyze, methods=['POST']),
    Route('/feedback', feedback),
    Mount('/static', static_files, name='static'),

]

# Cell
app = Starlette(debug=True, routes=routes)

# Cell
if __name__ == '__main__':
    if 'serve' in sys.argv:
        uvicorn.run(app=app, host='0.0.0.0', port=5000, log_level="info")