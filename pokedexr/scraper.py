# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_scraper.ipynb (unless otherwise specified).

__all__ = ['fetch_links', 'SCHEME', 'BULB_BASE_URL', 'get_camel_name', 'get_image_urls', 'IMG_EXCEPTIONS',
           'fetch_image', 'store_image', 'push_image_to_s3', 'save_image_local', 'BUCKET_NAME', 'LOCAL_FOLDER', 'main']

# Cell
import logging
from tqdm import tqdm

# Cell
import re
import requests
from bs4 import BeautifulSoup, SoupStrainer

SCHEME = 'https:'
BULB_BASE_URL = f'{SCHEME}//bulbapedia.bulbagarden.net/wiki/'

def fetch_links(deck_name: str):
    links=[]
    r = requests.get(f'{BULB_BASE_URL}{deck_name}s_(TCG)')
    if r.ok:
        LINK_FILTER = {'class':'mw-redirect','href':re.compile(deck_name)}
        links = list(set(BeautifulSoup(r.content, 'html.parser').find_all('a', LINK_FILTER)))

    return links

# Cell
import urllib

IMG_EXCEPTIONS = {'Devoured_Field_(GX_Starter_Deck_128)':'Decaying_Wasteland_()'}

def get_camel_name(url):
    n=IMG_EXCEPTIONS.get(url,url).split('(')[0][:-1]
    for char in '_-.:':
        n=n.replace(char,'')

    n = urllib.parse.unquote(n)
    return n

def get_image_urls(card_details_url):
    img_urls=[]
    r = requests.get(BULB_BASE_URL+card_details_url)
    if r.ok:
        soup = BeautifulSoup(r.content,'html.parser')
        IMAGE_FILTER = {'alt':re.compile(get_camel_name(card_details_url))}
        card_images = soup.findAll('img', IMAGE_FILTER)

        if len(card_images) > 0:
            img_urls = list(set([i.get('src') for i in card_images]))

        else:
            logging.warning(f"No images found for {card_details_url}")
    else:
        logging.warning(f"Couldn't fetch page: {card_details_url}")

    return img_urls


# Cell

import boto3
from pathlib import Path
from io import BytesIO

BUCKET_NAME='pokedexproject'
LOCAL_FOLDER=Path('.')

def fetch_image(img_url):
    r = requests.get(f'{SCHEME}{img_url}')
    if r.ok:
        data = r.content
        fname = img_url.split('/')[-1]
    else:
        logging.warning(f'Failed to fetch image {img_url}')
        data=None;fname=None
    return (data, fname)

def store_image(image, fname, location):
    if location[:2]=='s3':
        bucket=location[3:].split('/')[0]
        f=location[3:].split('/')[1:]
        push_image_to_s3(image, fname, bucket_name=bucket, dr='/'.join(f))
    else:
        save_image_local(image, fname, dr=location)

def push_image_to_s3(image_data, fname, dr='',bucket_name=''):
    s3 = boto3.resource('s3')
    key = '/'.join(filter(lambda item: item!='', [dr, fname]))
    ret = s3.Bucket(bucket_name).put_object(Key=key, Body=BytesIO(image_data))
    if not ret:
        logging.warning(f"Failed to upload {fname} to S3/{bucket_name}.")
    return ret

def save_image_local(image_data, fname, dr=''):
    n = '/'.join(filter(lambda item: item != '', [dr, fname]))
    with open(n,'wb') as f:
        f.write(image_data)
    return None



# Cell
import sys
import json
from pathlib import Path

def main():
    # handle inputs
    deck_name = sys.argv[1]
    storage_location = sys.argv[2]
    Path('tmp').mkdir(parents=True, exist_ok=True)
    tfile = Path('tmp/cards.json')

    # get the list of cards from the deck list page
    # for each card fetch image urls
    if tfile.exists():
        with open(tfile,'r') as f:
            cards = json.load(f)
    else:
        print(f"Fetching card links for the {deck_name} deck.")
        links = fetch_links(deck_name)
        cards = [ {'name': l.getText() ,'details_url': l.get('href').split('/')[-1]} for l in links ]

        with open(tfile,'w') as f:
            json.dump(cards, f)

    if 'img_urls' in cards[0].keys():
        pass
    else:
        print(f"Gathering image urls for each card in the deck.")
        for card in tqdm(cards):
            card.update({'img_urls':get_image_urls(card.get('details_url','ERROR'))})

        with open(tfile,'w') as f:
            json.dump(cards, f)

    # for each image_url fetch images and push to storage
    print(f"Fetching images and pushing to storage [{storage_location}]")
    for card in tqdm(cards):
        for url in card.get('img_urls'):
            image_data, fname = fetch_image(url)
            store_image(image_data, fname, f"{storage_location}/{card.get('name')}")


if __name__ == '__main__' and '__file__' in globals():
    main()